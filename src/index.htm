<!DOCTYPE html>
<html>
<head>
	<script src="jquery-2.1.0.min.js"></script>
	<script src="moment.min.js"></script>
	<script src="tinymenu-1.0.min.js"></script>
	<script src="utils.js"></script>
	<script src="speakGenerator.js"></script>
	<script src="speakClient.js"></script>
	<script src="trackconfig.js"></script>
	<!--<link rel="stylesheet" type="text/css" href="jquery-ui.min.css">-->
	<link rel="stylesheet" type="text/css" href="robodusty.css">
	<link href='http://fonts.googleapis.com/css?family=Rationale' rel='stylesheet' type='text/css'>
	<link href='http://fonts.googleapis.com/css?family=Varela+Round' rel='stylesheet' type='text/css'>
</head>
<body>
<canvas id="canvas"></canvas>
<!--TODO handle audio tags better-->
<audio id="clink">
	<source src="clink.mp3" type="audio/mpeg">
</audio>
<audio id="alert">
	<source src="warningtone.mp3" type="audio/mpeg">
</audio>
<div id="audio"></div>
<div id="controls">
	<div id="status">
		<div id="clock"></div>
		<!--<div id="config" class="button">Config</div>-->
		<div id="addTrack" class="button">Add Track</div>
	</div>
	<div id="tracksLabel">Tracks</div>
	<div id="tracks">
		<ul></ul>
	</div>
</div>
<div id="display">
	<div id="menu"></div>
</div>
<script>
// TODO don't pollute global namespace
// TODO add title alert?
// TODO sometimes a flood of LSR reports with "reports FLOOD" or "reports HEAVY RAIN"
// reports TSTM WND GST, reports TORNADO, reports WATER SPOUT, reports MARINE TSTM WIND, reports DEBRIS FLOW, reports NON-TSTM WND GST
// issues Summary Local Storm Report
var tracks = [];


var trackcallback = function(data) {
	$('#menu').empty().hide();
	
	if (data.info.type == 'codsat') {
		var track = new Track(data.info.Name, data.info.url, data.info.type, 3);
	}
	
	if (data.info.type == 'iem') {
		var track = new Track(data.info.name, data.info.url, data.info.type, 3);
	}
};
	
// Update clock
setInterval(function() { _setClock() }, 1000 );
_setClock();
function _setClock() {
	$('#clock').text(moment.utc(new Date()).utc().format('HH:mm') + 'Z');
	var now = new Date();
	$.each(tracks, function() {
		var updated = formatLastSuccess(now);
		var trackId = this.id;
		$('#tracks li').each(function() {
			if ($(this).data('trackId') == trackId) {
				$(this).find('.updated').text('last update: ' + updated);
				return false;
			}
		});
	});
}

function speakText(text, playEas) {
	spAmp = 100;
	spGap = 0;
	spPitch = 30;
	spSpeed =  140;
	if (playEas) {
		$('audio#alert')[0].play();
		setTimeout(function() { speak(text, { amplitude: spAmp, wordgap: spGap, pitch: spPitch, speed: spSpeed }); }, 27000);
	}
	else {
		speak(text, { amplitude: spAmp, wordgap: spGap, pitch: spPitch, speed: spSpeed });
	}
}

var _alertEl = $('#alert')[0];
var processAudioQueue = setInterval(function() {
	if (!speakerQueue.length) { return; }
	var _player = $('#player')[0];
	if ((_player == null || _player.paused) && _alertEl.paused) {
		var nextSpeak = speakerQueue.shift();
		speakText(nextSpeak.text, nextSpeak.alert);
	}
}, 3000);

// New blinkers
// TODO get blinkers on updated image
var _lastBlinkerShow = true;
setInterval(function() { 
	$('.status').each(function() {
		if ($(this).data('status') == 'new') {
			if (_lastBlinkerShow) {
				$(this).hide();
			}
			else {
				$(this).show();
			}
			_lastBlinkerShow = !_lastBlinkerShow;
		}
	})
}, 2000);

// Add track
$('#addTrack').click(function() {
	$('#display > div').hide();
	$('#menu').empty();
	$('#menu').tinyMenu(trackconfig, trackcallback).show();
});

// Config menu
$('#config').click(function() { });

// TODO prevent dupe tracks
function initIemTrack(track) {
	var maxWidth = $('#display').width() - 20;
	var maxHeight = $('#display').height() - 20;
	$('#display').append(
		$('<div/>', { 'class': 'track', 'id': 'displayIem' })
			.data('trackId', track.url.hashCode())
			.css('max-width', maxWidth)
			.css('max-height', maxHeight)
			.append($('<ol/>'))
	);
	getIemMessages(track);
}

function initSatTrack(track) {
	var maxWidth = $('#display').width() - 20;
	var maxHeight = $('#display').height() - 20;
	$('#display').append(
		$('<div/>', { 'class': 'track' })
			.data('trackId', track.url.hashCode())
			.css('max-width', maxWidth)
			.css('max-height', maxHeight)
	);
	updateSatTrack(track);
}

function processImage(img, track) {
	$(canvas).attr('width', img.naturalWidth).attr('height', img.naturalHeight);
	context.drawImage(img, 0, 0);
	imageData = context.getImageData(415, 589, 200, 11);
	var hash = JSON.stringify(imageData.data).hashCode();
	var displayTrack = null;
	
	$('#display .track').each(function() {
		if ($(this).data('trackId') == track.id) {
			displayTrack = $(this);
			return false;
		}
	});
	
	if (track.lastHash != null) {
		if (track.lastHash == hash) {
			displayTrack.find('img').last().remove();
		}
		else {
			$('#clink')[0].play();
			setTimeout(function() {	speakText('Visible satellite image has updated.'); }, 1000);
			$('li.track').each(function() {
				if ($(this).data('trackId') == track.id) {
					$(this).find('.status').data('status', 'new');
				}
			});
		}
	}
	
	track.lastHash = hash;
	displayTrack.find('img').hide();
	resizeDisplay();
	displayTrack.find('img').last().show();
}

function updateSatTrack(track) {
	var url = track.Url;
	var box = null;
	$('#display .track').each(function() {
		if ($(this).data('trackId') == track.id) {
			box = $(this);
			return false;
		}
	});
	
	if (box == null) { return false; }
	var images = box.find('img');
	var img = new Image();
	var ticks = new Date().getTime();
	img.crossOrigin = 'Anonymous';
	img.src = track.url + '?' + ticks;
	img.onload = function() { processImage(img, track) };
	box.append(img);
}

var Track = function()
{
    var constructor = function Track(name, url, type, updateMinutes) {
		var track = this;
		
		this.Name = name;
		this.url = url
		this.id = url.hashCode();
		this.lastHash = null;
		this.UpdateMinutes = updateMinutes;
		this.lastSuccess = null;
		
		// Add track to control list
		$('#tracks li').removeClass('selected');
		$('#tracks ul').append(
			$('<li/>', { 'class': 'track selected' })
				.data('trackId', url.hashCode()).append(
					$('<div/>', { 'class': 'label', 'text': name }),
					$('<div/>', { 'class': 'updated', 'text': 'last update:' }),
					$('<div/>', { 'class': 'arrow' })
				)
				.click(function() {
					$('#tracks li').removeClass('selected');
					$(this).addClass('selected');
					var trackId = $(this).data('trackId');
					$('#display .track').hide();
					$('#display .track').each(function() {
						if ($(this).data('trackId') == trackId) {
							$(this).show();
							return false;
						}
					});
				})
		);

		tracks.push(track);
		
		switch (type) {
			case 'iem':
				var iemTimer = setInterval(function() { getIemMessages(track); }, 30000);
				initIemTrack(track);
				break;
			case 'codsat':
				setInterval(function() { updateSatTrack(track) }, updateMinutes * 60000);
				initSatTrack(track);
				break;
		}
    };

    return constructor;
}();

var canvas = document.getElementById('canvas');
var context = canvas.getContext('2d');
var speakerQueue = [];

function formatLastSuccess(ts) {
	var diff = new Date() - ts;
	if (diff < 60000) { return '< 1min'; }
	if (diff >= 60000 && diff < 300000) { return '< 5min'; }
	if (diff >= 300000) { return '> 5min'; }
}

function resizeDisplay() {
	var displayWidth = $(window).width() - $('#controls').width();
	$('#display').width(displayWidth);
}
$(window).resize(function() {
	resizeDisplay();
});
resizeDisplay();

// IEM STUFF
var lastSeqNum = 0;
var lastEven = false;
var _isFilteredType = function(code) {
	return (code == 'RER' || code == 'WSW' || code == 'MWW' || code == 'PNS' || code == 'HWO' || code == 'NPW' || code == 'FLS' || code == 'CFW' || code == 'SMW' || code == 'MWS' || code == 'FFA'
	|| code == 'ADM' || code == 'FLW' || code == 'RFD' || code == 'RFW' || code == 'SPE');
};
var _isFilteredLsr = function(msg) {
	return (msg.indexOf('reports TSTM WND') > -1 || msg.indexOf('reports HEAVY RAIN') > -1 || msg.indexOf('reports SLEET') > -1 || msg.indexOf('reports MARINE') > -1);
}
var _isAllowedWfo = function(msg) {
	var wfo = msg.replace('K', '');
	return (wfo == 'BOU' || wfo == 'GJT' || wfo == 'PUB' || wfo == 'LOT' || wfo == 'ILX' || wfo == 'DVN' || wfo == 'DMX' || wfo == 'DDC' || wfo == 'GLD' || wfo == 'TOP' || wfo == 'ICT'
		|| wfo == 'MPX' || wfo == 'EAX' || wfo == 'SGF' || wfo == 'LSX' || wfo == 'GID' || wfo == 'LBF' || wfo == 'OAX' || wfo == 'ABR' || wfo == 'UNR' || wfo == 'FSD' || wfo == 'CYS' 
		|| wfo == 'OUN' || wfo == 'TSA' || wfo == 'AMA' || wfo == 'FWD' || wfo == 'LUB' || wfo == 'MAF');
}
function getIemMessages(track) {
	// Truncate older messages to keep things fast
	if ($('#displayIem li').length > 100) {
		var count = 0;
		$('#displayIem li').each(function() {
			count++;
			if (count > 100) { $(this).remove(); }
		});
	}
	
	var url = 'http://mesonet.agron.iastate.edu/iembot-json/room/botstalk?seqnum=' + lastSeqNum + '&callback=?';
	$.getJSON(url, null, function(data) {
		var tmpCode = '';
		
		$.each(data.messages, function() {
			var tmpMessage = $(this)[0];
			if (tmpMessage.product_id.length > 0) {
				var tmpProductData = tmpMessage.product_id.split('-');
				if (tmpProductData[3] !== null && tmpProductData[3].length >= 3) { tmpCode = tmpProductData[3].substring(0, 3); }
				if (tmpProductData[1] === 'KWNS') { tmpCode += '|SPC'; }
				//if (_isFilteredType(tmpCode)) { return; }
				//if (_isFilteredLsr(tmpMessage.message)) { return; }
				//if ((tmpCode == 'AFD' || tmpCode == 'NOW' || tmpCode == 'LSR') && !_isAllowedWfo(tmpProductData[1])) { return; }
				//if ((tmpCode == 'WCN' || tmpCode == 'SVS') && (tmpMessage.message.indexOf('cancels') > -1 || tmpMessage.message.indexOf('continues'))) { return; }
			}
			
			// Speaker Queue stuff testing
			// Parse abbreviations
			
			if (tmpCode == 'LSR') {
				var parsedText = tmpProductData[1] + $('<div/>').html(tmpMessage.message).find('a').text();
				parsedText = parsedText.replaceAll('Co', 'county');
				parsedText = parsedText.replaceAll('TSTM', 'thunder storm');
				parsedText = parsedText.replaceAll('WND', 'wind');
				parsedText = parsedText.replaceAll('DMG', 'damage');
				parsedText = parsedText.replaceAll('GST', 'gust');
				parsedText = parsedText.replaceAll('MPH', 'miles per hour');
				parsedText = parsedText.replaceAll('KY', 'Kentucky');
				speakerQueue.push( { 'text': 'There is a new local storm report. ' + parsedText, 'alert': false });
			}
			
			if (tmpCode == 'TOR') {
				speakerQueue.push( { 'text': 'The national weather service has issued a tornado warning. ' + parsedText, 'alert': true });
			}

			var li = $('<li/>', { 'class': tmpCode }).addClass('shadow');
			if (lastEven) { li.addClass('even'); }
			lastEven = !lastEven;
			
			$('#displayIem > ol').prepend(
					li.append($('<span/>', { 'class': 'iemTimestamp', 'text': moment(tmpMessage.ts).format('MM/DD HH:mm') + 'Z' }))
					.append($('<span/>', { 'class': 'iemMessage', 'html': tmpMessage.message }))
			);
		});
		
		if (data.messages.length > 0) {
			tmpLastSeqNum = data.messages[data.messages.length - 1].seqnum;
			if (!isNaN(tmpLastSeqNum)) {
				lastSeqNum = tmpLastSeqNum;
			}
		}
		
		track.lastSuccess = new Date();
	});
}
</script>
</body>
</html>