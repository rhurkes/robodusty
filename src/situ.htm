<!DOCTYPE html>
<html>
<head>
	<script src="jquery-2.1.0.min.js"></script>
	<script src="moment.min.js"></script>
	<script src="tinymenu-1.0.min.js"></script>
	<script src="utils.js"></script>
	<script src="speakGenerator.js"></script>
	<script src="speakClient.js"></script>
	<script src="trackconfig.js"></script>
	<link rel="stylesheet" type="text/css" href="jquery-ui.min.css">
	<link rel="stylesheet" type="text/css" href="robodusty.css">
	<link href='http://fonts.googleapis.com/css?family=Rationale' rel='stylesheet' type='text/css'>
	<link href='http://fonts.googleapis.com/css?family=Varela+Round' rel='stylesheet' type='text/css'>
</head>
<body>
<canvas id="canvas"></canvas>
<div id="controls">
	<div id="status">
		<div id="clock"></div>
		<div id="config" class="button">Config</div>
		<div id="addTrack" class="button">Add Track</div>
	</div>
	<div id="tracksLabel">Tracks</div>
	<div id="tracks">
		<ul></ul>
	</div>
</div>
<div id="display">
	<div id="menu"></div>
</div>
<script>
// TODO don't pollute global namespace
// TODO add title alert?
// TODO sometimes a flood of LSR reports with "reports FLOOD" or "reports HEAVY RAIN"
// reports TSTM WND GST, reports TORNADO, reports WATER SPOUT, reports MARINE TSTM WIND, reports DEBRIS FLOW
var trackcallback = function(data) {
	$('#menu').empty().hide();
	
	if (data.info.type == 'codsat') {
		var track = new Track(data.info.Name, data.info.Url, data.info.type, 3);
	}
	
	if (data.info.type == 'iem') {
		var track = new Track(data.info.name, '', data.info.type, 3);
	}
};
	
// Update clock
setInterval(function() { _setClock() }, 1000 );
_setClock();
function _setClock() {
	$('#clock').text(moment.utc(new Date()).utc().format('MM/DD HH:mm') + 'Z');
}

// New blinkers
// TODO get blinkers on updated image
var _lastBlinkerShow = true;
setInterval(function() { 
	$('.status').each(function() {
		if ($(this).data('status') == 'new') {
			if (_lastBlinkerShow) {
				$(this).hide();
			}
			else {
				$(this).show();
			}
			_lastBlinkerShow = !_lastBlinkerShow;
		}
	})
}, 2000);

// Add track
$('#addTrack').click(function() {
	$('#display > div').hide();
	$('#menu').empty();
	$('#menu').tinyMenu(trackconfig, trackcallback).show();
});

// Config menu
$('#config').click(function() { });

var tracks = [];

// TODO prevent dupe tracks
function initIemTrack(track) {
	var maxWidth = $('#display').width() - 20;
	var maxHeight = $('#display').height() - 20;
	$('#display').append(
		$('<div/>', { 'class': 'track', 'id': 'displayIem' })
			.data('trackId', track.url.hashCode())
			.css('max-width', maxWidth)
			.css('max-height', maxHeight)
			.append($('<ol/>'))
	);
	getIemMessages(track);
}

function initSatTrack(track) {
	var maxWidth = $('#display').width() - 20;
	var maxHeight = $('#display').height() - 20;
	$('#display').append(
		$('<div/>', { 'class': 'track' })
			.data('trackId', track.url.hashCode())
			.css('max-width', maxWidth)
			.css('max-height', maxHeight)
	);
	updateSatTrack(track);
}

function processImage(img, track) {
	$(canvas).attr('width', img.naturalWidth).attr('height', img.naturalHeight);
	context.drawImage(img, 0, 0);
	imageData = context.getImageData(415, 589, 200, 11);
	var hash = JSON.stringify(imageData.data).hashCode();
	var displayTrack = null;
	
	$('#display .track').each(function() {
		if ($(this).data('trackId') == track.id) {
			displayTrack = $(this);
			return false;
		}
	});
	
	if (track.lastHash != null) {
		if (track.lastHash == hash) {
			displayTrack.find('img').last().remove();
		}
		else {
			console.log('new image found!');
			$('li.track').each(function() {
				if ($(this).data('trackId') == track.id) {
					$(this).find('.status').data('status', 'new');
				}
			});
		}
	}
	
	track.lastHash = hash;
	displayTrack.find('img').hide();
	resizeDisplay();
	displayTrack.find('img').last().show();
}

function updateSatTrack(track) {
	var url = track.Url;
	var box = null;
	$('#display .track').each(function() {
		if ($(this).data('trackId') == track.id) {
			box = $(this);
			return false;
		}
	});
	
	if (box == null) { return false; }
	var images = box.find('img');
	var img = new Image();
	var ticks = new Date().getTime();
	img.crossOrigin = 'Anonymous';
	img.src = track.url + '?' + ticks;
	img.onload = function() { processImage(img, track) };
	box.append(img);
}

var Track = function()
{
    var constructor = function Track(name, url, type, updateMinutes) {
		console.log('creating new Track');
		var track = this;
		
		this.Name = name;
		this.url = url
		this.id = url.hashCode();
		this.lastHash = null;
		this.UpdateMinutes = updateMinutes;
		
		// Add track to control list
		$('#tracks ul').append(
			$('<li/>', { 'class': 'track' })
				.data('trackId', url.hashCode())
				//.append($('<div/>', { 'class': 'status', 'text': '*' }))
				.append($('<div/>', { 'class': 'label', 'text': name }))
				//.append($('<div/>', { 'class': 'close', 'text': 'X' }))
				.click(function() {
					var trackId = $(this).data('trackId');
					$('#display .track').hide();
					$('#display .track').each(function() {
						if ($(this).data('trackId') == trackId) {
							$(this).show();
							return false;
						}
					});
				})
		);

		tracks.push(track);
		
		switch (type) {
			case 'iem':
				var iemTimer = setInterval(function() { getIemMessages(track); }, 30000);
				initIemTrack(track);
				break;
			case 'codsat':
				setInterval(function() { updateSatTrack(track) }, updateMinutes * 60000);
				initSatTrack(track);
				break;
		}
    };

    return constructor;
}();

var canvas = document.getElementById('canvas');
var context = canvas.getContext('2d');

function resizeDisplay() {
	var displayWidth = $(window).width() - $('#controls').width();
	$('#display').width(displayWidth);
}
$(window).resize(function() {
	resizeDisplay();
});
resizeDisplay();

// IEM STUFF
var lastSeqNum = 0;
var lastEven = false;
var _isFilteredType = function(code) {
	return (code == 'RER' || code == 'WSW' || code == 'MWW' || code == 'PNS' || code == 'HWO' || code == 'NPW' || code == 'FLS' || code == 'CFW' || code == 'SMW' || code == 'MWS' || code == 'FFA' || code == 'ADM');
};
function getIemMessages(track) {
	var url = 'http://mesonet.agron.iastate.edu/iembot-json/room/botstalk?seqnum=' + lastSeqNum + '&callback=?';
	$.getJSON(url, null, function(data) {
		var tmpCode = '';
		var lastSpcMessage = '';
		
		$.each(data.messages, function() {
			var tmpMessage = $(this)[0];
			if (tmpMessage.product_id.length > 0) {
				var tmpProductData = tmpMessage.product_id.split('-');
				if (tmpProductData[3] !== null && tmpProductData[3].length >= 3) { tmpCode = tmpProductData[3].substring(0, 3); }
				if (tmpProductData[1] === 'KWNS') { tmpCode += '|SPC'; }
				if (_isFilteredType(tmpCode)) { return; }
			}

			var li = $('<li/>', { 'class': tmpCode }).addClass('shadow');
			if (lastEven) {
				li.addClass('even');
			}
			lastEven = !lastEven;
			
			$('#displayIem > ol').prepend(
					li.append($('<span/>', { 'class': 'iemMessage', 'text': moment(tmpMessage.ts).format('MM/DD HH:mm') + 'Z' }))
					.append($('<span/>', { 'class': 'iemMessage', 'html': tmpMessage.message }))
			);
		});
		
		if (data.messages.length > 0) {
			tmpLastSeqNum = data.messages[data.messages.length - 1].seqnum;
			if (!isNaN(tmpLastSeqNum)) {
				lastSeqNum = tmpLastSeqNum;
			}
		}
	});
}
</script>
</body>
</html>